let Koa,Router,bodyParser,mongoose,serve,path,send,api,jwtMiddleware;_6e5‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_6e5‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_6e5‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_6e5‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_6e5‍.w("koa-static",[["default",["serve"],function(v){serve=v}]]);_6e5‍.w("path",[["default",["path"],function(v){path=v}]]);_6e5‍.w("koa-send",[["default",["send"],function(v){send=v}]]);_6e5‍.w("./api",[["default",["api"],function(v){api=v}]]);_6e5‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();











// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
.connect(MONGO_URI)
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch( e => {
        _6e5‍.g.console.log(e);
    });


const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);
// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const buildDirectory = path.resolove(__dirname, '../../blog-frontend/build');
app.use(serve(buildDirectory));
app.use(async ctx => {
    // Not Found이고, 주소가 /api로 시작하지 않는 경우
    if(ctx.status === 404 && ctx.path.indexOf('/api') !== 0) {
        // index.html 내용을 반환
        await send(ctx, 'index.html', { root: buildDirectory});
    }
});

// PORT가 저장되어 있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(4000, () => {
    _6e5‍.g.console.log('Listening to port %d', port);
})